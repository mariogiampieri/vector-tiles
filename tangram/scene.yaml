cameras:
    camera1:
        type: isometric

lights:
    light1:
        type: directional
        direction: [0, 1, -0.5]
        diffuse: 0.3
        ambient: 0.4

sources:
    osm:
        type: TopoJSON
        url:  //vector.mapzen.com/osm/earth/{z}/{x}/{y}.topojson?api_key=vector-tiles-HqUVidw

    contours:
        type: GeoJSON
        url: //localhost:8000/nyc_5m/{z}/{x}/{y}.json

layers:
    contours:
        data: { source: contours}
        draw:
            lines:
                order: 8
                width: 5
                cap: round
                color: '#000000'

        contour-lines:
            filter: { $zoom: { min: 15 } }
            draw:
                lines:
                    extrude: function () { return feature.height || $zoom >= 7; }

    earth:
        data: { source: osm }
        draw:
            polygons:
                order: 0
                color: '#000000'

    landuse:
        data: { source: osm }
        draw:
            polygons:
                order: 1
                color: '#aaffaa'

    water:
        data: { source: osm }
        draw:
            polygons:
                order: 2
                color: '#FFFF99'

    roads:
        data: { source: osm }
        filter:
            not: { kind: ["path", "rail"] }
        draw:
            lines:
                order: 4
                color: gray
                width: 8
                cap: round
        highway:
            filter:
                kind: highway
            draw:
                lines:
                    order: 5
                    color: '#cc6666'
                    width: 12
                    outline:
                        color: grey
                        width: 1.5
        minor_road:
            filter:
                kind: minor_road
            draw:
                lines:
                    order: 3
                    color: lightgrey
                    width: 5


#styles:
#      3d-buildings:
#            globals: |
#                uniform float u_frequency;
#                uniform vec3 u_windowColor;
#                uniform vec3 u_buildingColor;
#                uniform vec3 u_roofColor;
#
#            fragment: |
#                vec3 vPos = worldPosition().xyz / u_frequency;
#
#                // draw repeating bars on all axes, creating darker "window" voids between
#                vec3 mask = mix(vec3(0.0), vec3(1.0), step(fract(mod(vPos, .9)), vec3(.4, .4, .6)));
#
#                // treat brighter areas as building color
#                if (mask.x + mask.y + mask.z > .5) {
#                    color = u_buildingColor;
#                    color -= vec3(vPos.z * .1); // height factor
#                // treat darker areas as windows
#                } else {
#                    // modulate the window color with a noise function
#                    float noiseColor = 2. * noise(worldPosition().xyz * 0.1 + (floor(u_time * 5.) / 10.));
#                    color = u_windowColor * noiseColor;
#                }
#                // if the face points up, it's a roof
#                if (v_normal.z > .6 || v_normal.z < -.6) {
#                    color = u_roofColor;
#                    color -= vec3(vPos.z * .01); // height factor
#                }
